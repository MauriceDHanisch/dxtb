"""
Test data for gradient of parameters w.r.t. forces. The gradient is calculated
within dxtb using full gradient tracking in the SCF and `torch.float`.
"""

import torch

from dxtb.typing import Molecule, Tensor, TypedDict

from ..molecules import merge_nested_dicts, mols


class Refs(TypedDict):
    """Format of reference records containing GFN1-xTB and GFN2-xTB reference values."""

    egrad: dict[str, Tensor]
    """Gradient of parameters w.r.t. energy"""

    ggrad: dict[str, Tensor]
    """Gradient of parameters w.r.t. gradient of energy"""


class Record(Molecule, Refs):
    """Store for molecular information and reference values"""


refs: dict[str, Refs] = {
    "LiH": {
        "egrad": {
            "selfenergy": torch.tensor(
                [
                    1.6357328891754150,
                    -0.0046936045400798,
                    0.5142490863800049,
                    0.5646042823791504,
                ]
            ),
            "kcn": torch.tensor(
                [
                    -1.6142191886901855,
                    0.0046318727545440,
                    -0.5074855089187622,
                    -0.5571784377098083,
                ]
            ),
            "shpoly": torch.tensor(
                [
                    -0.4366373419761658,
                    0.0015797559171915,
                    -0.2146054208278656,
                    -0.2099009454250336,
                ]
            ),
        },
        "ggrad": {
            "selfenergy": torch.tensor(
                [+0.0002029369, +0.0017547115, +0.1379896402, -0.1265652627]
            ),
            "kcn": torch.tensor(
                [-0.1432282478, -0.0013212233, -0.1811404824, +0.0755317509]
            ),
            "shpoly": torch.tensor(
                [+0.0408593193, -0.0007219329, -0.0385218151, +0.0689999014]
            ),
        },
    },
    "H2O": {
        "egrad": {
            "selfenergy": torch.tensor(
                [
                    1.7678130865097046,
                    0.1307297050952911,
                    1.7701359987258911,
                    5.4954867362976074,
                ]
            ),
            "kcn": torch.tensor(
                [
                    -1.7585048675537109,
                    -0.1300413608551025,
                    -3.5184326171875000,
                    -10.9231719970703125,
                ]
            ),
            "shpoly": torch.tensor(
                [
                    -1.1518127918243408,
                    -0.0816857665777206,
                    -0.3086315393447876,
                    -1.1141524314880371,
                ]
            ),
        },
        "ggrad": {
            "selfenergy": torch.tensor(
                [
                    +0.0201908200979233,
                    -0.1104588359594345,
                    -0.1022646874189377,
                    +0.3026777505874634,
                ]
            ),
            "kcn": torch.tensor(
                [
                    -0.0972348898649216,
                    +0.1041719615459442,
                    +0.0487641692161560,
                    -1.0812859535217285,
                ]
            ),
            "shpoly": torch.tensor(
                [
                    -0.0837635546922684,
                    +0.0743020549416542,
                    -0.3784617185592651,
                    +0.2503065466880798,
                ]
            ),
        },
    },
    "SiH4": {
        "egrad": {
            "selfenergy": torch.tensor(
                [
                    5.7540431022644043,
                    -0.0297646597027779,
                    1.5699133872985840,
                    2.8824529647827148,
                    0.8327780961990356,
                ]
            ),
            "kcn": torch.tensor(
                [
                    -5.5966801643371582,
                    0.0289506483823061,
                    -6.1073198318481445,
                    -11.2133970260620117,
                    -3.2396960258483887,
                ]
            ),
            "shpoly": torch.tensor(
                [
                    -1.8523957729339600,
                    0.0186991691589355,
                    -0.6921472549438477,
                    -1.3113665580749512,
                    -0.2821865677833557,
                ]
            ),
        },
        "ggrad": {
            "selfenergy": torch.tensor(
                [
                    +5.2154064178466797e-08,
                    +4.9360096454620361e-08,
                    +9.6857547760009766e-08,
                    +6.3329935073852539e-08,
                    -5.5879354476928711e-08,
                ]
            ),
            "kcn": torch.tensor(
                [
                    -2.3841857910156250e-07,
                    -5.4948031902313232e-08,
                    -3.5340434578756685e-07,
                    -2.0341597917195031e-07,
                    +2.2979276081969147e-07,
                ]
            ),
            "shpoly": torch.tensor(
                [
                    +1.6018748283386230e-07,
                    -2.3283064365386963e-08,
                    +2.2165477275848389e-07,
                    -1.1362135410308838e-07,
                    +1.2805685400962830e-08,
                ]
            ),
        },
    },
    "LYS_xao": {
        "egrad": {
            "selfenergy": torch.tensor(
                [
                    23.2666225433349609,
                    0.7051715254783630,
                    11.7749156951904297,
                    35.8357200622558594,
                    4.9364767074584961,
                    14.3464078903198242,
                    3.6059424877166748,
                    10.5279283523559570,
                ]
            ),
            "kcn": torch.tensor(
                [
                    -23.3448867797851562,
                    -0.7082265019416809,
                    -45.4391021728515625,
                    -138.9965057373046875,
                    -15.2383108139038086,
                    -44.2756156921386719,
                    -3.8392236232757568,
                    -11.2090377807617188,
                ]
            ),
            "shpoly": torch.tensor(
                [
                    -9.4243803024291992,
                    -0.3278915882110596,
                    -5.8546934127807617,
                    -14.6036243438720703,
                    -1.7704765796661377,
                    -3.9245731830596924,
                    -0.4496000409126282,
                    -1.6272772550582886,
                ]
            ),
        },
        "ggrad": {
            "selfenergy": torch.tensor(
                [
                    -0.0236866232007742,
                    +0.0329584367573261,
                    -0.0796709954738617,
                    +0.0810616388916969,
                    -0.0167455300688744,
                    -0.0992878675460815,
                    +0.0035702660679817,
                    -0.0344504565000534,
                ]
            ),
            "kcn": torch.tensor(
                [
                    +0.0371370315551758,
                    -0.0326246172189713,
                    +0.2156552672386169,
                    -1.0895895957946777,
                    -0.2504942417144775,
                    -0.5578549504280090,
                    -0.0560819841921329,
                    -0.1159448027610779,
                ]
            ),
            "shpoly": torch.tensor(
                [
                    +0.2418332993984222,
                    -0.0145443072542548,
                    +0.0408689938485622,
                    -0.1285742074251175,
                    +0.0428046323359013,
                    -0.0263019893318415,
                    -0.0102892229333520,
                    +0.0534406043589115,
                ]
            ),
        },
    },
}


refs_grad: dict[str, Record] = merge_nested_dicts(mols, refs)
